variables:
  GIT_STRATEGY: clone

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH

stages:
  - test
  - integration
  - build
  - publish

image: python:latest

# ============================================================================
# Test and lint Python package
# ============================================================================

test:
  stage: test
  image: nexus.engageska-portugal.pt/ska-docker/ska-python-buildenv:latest
  before_script:
    - pip3 install -r requirements.txt -r requirements-test.txt
  script:
    - pip3 list
    - python3 setup.py test
  after_script:
    - mkdir -p build/reports
    - mv code-coverage.xml unit-tests.xml build/reports
  artifacts:
    paths:
      - build
      - cucumber.json
    expire_in: 1 week
    when: always

lint:
  stage: test
  image: nexus.engageska-portugal.pt/ska-docker/ska-python-buildenv:latest
  before_script:
    - pip3 install -r requirements.txt -r requirements-test.txt
  script:
    - pylint --exit-zero --output-format=parseable src/ska_sdp_lmc
    - pylint --exit-zero --output-format=pylint2junit.JunitReporter src/ska_sdp_lmc > linting.xml
  after_script:
    - mkdir -p build/reports
    - mv linting.xml build/reports
  artifacts:
    paths:
      - build
    expire_in: 1 week
    when: always

# ============================================================================
# Integration test with etcd
# ============================================================================

etcd_test:
  stage: integration
  image: nexus.engageska-portugal.pt/ska-docker/ska-python-buildenv:latest
  services:
    - name: quay.io/coreos/etcd:latest
      alias: etcd
      command:
        - /usr/local/bin/etcd --version
        #- "--log-level=debug"
        #- "--advertise-client-urls=http://0.0.0.0:2379"
        #- "--listen-client-urls=http://0.0.0.0:2379"
        #- "--initial-advertise-peer-urls=http://0.0.0.0:2380"
        #- "--listen-peer-urls=http://0.0.0.0:2380"
        #- "--initial-cluster=default=http://0.0.0.0:2380"
  variables:
    FEATURE_EVENT_LOOP: 1
    FEATURE_CONFIG_DB: 1
  before_script:
    - pip3 install -r requirements.txt -r requirements-test.txt
  script:
    - python3 setup.py test

# ============================================================================
# Build Docker development image
# ============================================================================

build:
  stage: build
  variables:
    GIT_VERSION: ${CI_COMMIT_SHORT_SHA}
    PREFIX_BUILD: ${CI_REGISTRY_IMAGE}
  image: docker:stable
  services:
    - docker:dind
  before_script:
    - apk add make git
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - make build
    - make push

# ============================================================================
# Tag and publish Docker image (master only)
# ============================================================================

publish:
  stage: publish
  dependencies:
    - build
  only: [master]
  variables:
    GIT_VERSION: ${CI_COMMIT_SHORT_SHA}
    PREFIX_BUILD: ${CI_REGISTRY_IMAGE}
    PREFIX_RELEASE: ${DOCKER_REGISTRY_HOST}/sdp-prototype
  image: docker:stable
  services:
    - docker:dind
  before_script:
    - apk add make git
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker login -u $DOCKER_REGISTRY_USERNAME -p $DOCKER_REGISTRY_PASSWORD $DOCKER_REGISTRY_HOST
  script:
    - make pull
    - make push_release
  retry: 2

# ============================================================================
# Upload results of BDD tests to Jira (master only)
# ============================================================================

xray-report:
  stage: publish
  only: [master]
  when: always
  allow_failure: true
  retry: 2
  script:
    - 'curl -X POST -H "Content-Type: application/json" --fail
      -H "Authorization: Basic $JIRA_AUTH"
      --data @cucumber.json
      https://jira.skatelescope.org/rest/raven/1.0/import/execution/cucumber'

# ============================================================================
# CI metrics
# ============================================================================

create_ci_metrics:
  stage: .post
  when: always
  script:
    # Gitlab CI badges creation: START
    - curl -s https://gitlab.com/ska-telescope/ci-metrics-utilities/raw/master/scripts/ci-badges-func.sh | sh
    # Gitlab CI badges creation: END
  artifacts:
    paths:
      - build
    expire_in: 1 week
